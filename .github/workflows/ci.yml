name: CI/CD Pipeline

on:
  push:
    branches: [master]
    tags: ["v*"]

env:
  COMPOSER_CACHE_DIR: ~/.composer/cache
  COMPOSER_FLAGS: "--ansi --no-progress --prefer-dist -n"

jobs:
  # Build and dependency installation
  composer:
    name: Install Dependencies
    runs-on: ubuntu-latest
    container:
      image: tikiwiki/tikiwiki-ci:8.1-qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: |
          composer -V | grep "version 2" || composer self-update --2
          composer install --prefer-dist --no-progress

      - name: Upload vendor directory
        uses: actions/upload-artifact@v3
        with:
          name: vendor-dir
          path: vendor/
          retention-days: 2

  # Unit tests across multiple PHP versions
  unit-tests:
    name: Unit Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    needs: composer
    strategy:
      matrix:
        php-version: ["8.1", "8.2", "8.3", "8.4"]
    container:
      image: tikiwiki/tikiwiki-ci:${{ matrix.php-version }}-qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-

      - name: Setup ImageMagick and PHP extensions
        run: |
          apt-get update --allow-releaseinfo-change
          add-apt-repository -y ppa:ondrej/php
          apt-get update
          apt-get install -y imagemagick
          apt-get install -y php${{ matrix.php-version }}-imagick 
          echo "Enabling ImageMagick to read/write PDFs"
          if [ -f /etc/ImageMagick-6/policy.xml ]; then
            sed -i -e 's/<policy domain="coder" rights="none" pattern="PDF" \/>/<policy domain="coder" rights="read|write" pattern="PDF" \/>/' /etc/ImageMagick-6/policy.xml
            sed -i -e 's/<policy domain="coder" rights="none" pattern="EPS" \/>/<policy domain="coder" rights="read|write" pattern="EPS" \/>/' /etc/ImageMagick-6/policy.xml
          fi

      - name: Update and install Composer dependencies
        run: |
          composer update ${{ env.COMPOSER_FLAGS }}
          composer install ${{ env.COMPOSER_FLAGS }}

      - name: Run PHPUnit tests
        run: |
          php -d display_errors=On bin/phpunit --colors=always --log-junit report.xml --display-deprecations --display-notices --display-warnings

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-php${{ matrix.php-version }}
          path: report.xml
          retention-days: 2

  # Package creation for releases
  package:
    name: Create Package
    runs-on: ubuntu-latest
    needs: [composer, unit-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    container:
      image: tikiwiki/tikiwiki-ci:8.1-qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create package
        run: |
          PACK_FILES_FOLDERS_LIST="lib composer.json README.md LICENSE"
          tar czvf imagine.tgz ${PACK_FILES_FOLDERS_LIST}

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: imagine-package
          path: imagine.tgz
          retention-days: 30

  # Release creation for tags
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [package, unit-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    container:
      image: tikiwiki/tikiwiki-ci:8.1-qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: imagine-package
          path: .

      - name: Extract tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          name: Release ${{ steps.tag.outputs.TAG_NAME }}
          body: "Release of ${{ steps.tag.outputs.TAG_NAME }}"
          files: imagine.tgz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
